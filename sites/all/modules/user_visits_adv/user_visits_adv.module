<?php
// $Id: user_visits_adv.module,v 1.6 2009/03/10 15:58:43 toemaz Exp $

/**
 * @file
 * User visits Advanced
 * Extending user_visits module
 * - store a total number of visits
 * - store the number of visits history for each of the X past days
 * - store the most recent visitors uids of the past Y hours
 * - implement blocks to display this stored information
 */

/**
 * Implementation of hook_help();
 */
function user_visits_adv_help($path, $arg) {
  switch ($path) {
    case "admin/help#user-visits-advaced":
      $output = '<p>'.  t('Extends the user visits module.') .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_block().
 */
function user_visits_adv_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('My recent visitors adv'),
    );
    $blocks[1] = array(
      'info' => t('My visitors history adv'),
    );
    return $blocks;
  }
  else if ($op == 'configure') {
    $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#default_value' => variable_get('user_visits_adv_block_items_'. $delta, 5),
      '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25)),
    );
    return $form;
  }
  else if ($op == 'save') {
    variable_set('user_visits_adv_block_items_'. $delta, $edit['items']);
  }
  else if ($op == 'view') {
    $limit = variable_get('user_visits_adv_block_items_'. $delta, 5);
    switch ($delta) {
      case 0:
        $block = array(
          'subject' => t('Latest visitors'),
          'content' => user_visits_adv_visitors_block($limit),
          );
        break;
      case 1:
        $block = array(
          'subject' => t('Visitors history'),
          'content' => user_visits_adv_history_block($limit),
          );
        break;
    }
    return $block;
  }
}

/**
 * Get latest visitors for block content
 */
function user_visits_adv_visitors_block($limit = 5) {
  global $user;

  if ($user->uid) {
    $visitors = user_visits_adv_get('visitors', $user->uid);
    if (is_array($visitors)) {
      $visitors = array_slice($visitors, 0, $limit, TRUE);
      foreach ($visitors as $uid => $visit) {
        $account = db_fetch_object(db_query('SELECT uid, name, picture FROM {users} WHERE uid = %d', $uid));
        $output .= theme('user_visits', $account, $visit);
      }
    }
  }
  return $output;
}

/**
 * Get latest visitors for block content
 */
function user_visits_adv_history_block($limit = 7) {
  global $user;
  if ($user->uid) {
    // initialize the total number of visits to the users profile page
    $total = 0;
    $total += user_visits_adv_get('total', $user->uid);
    // retrieve the history of the users profile visits and add it up to a clean history array
    $history_visits = user_visits_adv_get('history', $user->uid);
    $history = array_fill(user_visits_get_history_key(time()) - $limit + 1, $limit, 0);
    foreach ($history as $key => $visits) {
      $history[$key] += $history_visits[$key];
    }
    $output = theme('user_visits_adv_history', $history, $total);
  }
  return $output;
}

/**
 * Implementation of hook_theme().
 * @return array Definitions of the themable functions
 */
function user_visits_adv_theme() {
  return array(
    'user_visits_adv_history' => array(
      'arguments' => array(
        'history' => NULL,
        'total' => NULL
      )
    ),
  );
}

/**
 * Theme function for history block
 * @param $history is array with the views data of the past X days.
 * X is defined in the configuration of the block
 * @param $total the total number of views
 */
function theme_user_visits_adv_history($history, $total) {
  $output = '<div>'. t('!total views in total', array('!total' => $total)) .'</div>';
  $output .= '<div>'. t('history') .': '. implode(' ', $history) .'</div>';
  return $output;
}

/**
 * Get latest visitors for block content
 */
function user_visits_adv_get($element, $uid) {
  static $user_visits_adv_data = array();
  if (!isset($user_visits_adv_data[$uid])) {
    if ($data = db_fetch_object(db_query('SELECT total, visitors, history FROM {user_visits_adv} WHERE uid = %d', $uid))) {
      $user_visits_adv_data[$uid] = array(
        'total' => $data->total,
        'visitors' => unserialize($data->visitors),
        'history' => unserialize($data->history),
      );
    }
    else {
      $user_visits_adv_data[$uid] = array();
    }
  }
  return $user_visits_adv_data[$uid][$element];
}

/**
 * Implementation of hook_user().
 */
function user_visits_adv_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {user_visits_adv} WHERE uid = %d', $account->uid);
      break;
  }
}

/**
 * Helper function to create the history key
 * This key is used in the history array to define the day
 * @param $time is a UNIX timestamp
 * @return integer within the interval [0-99356]
 */
function user_visits_get_history_key($time) {
  // constructed with the year [0-99] and the day [0-356]
  return (date('y', $time) * 1000) + date('z', $time);
}

/**
 * Implementation of hook_cron().
 */
function user_visits_adv_cron() {
  $visitor_limit = variable_get('user_visits_adv_visitor_limit', 20);
  $visits = db_query('SELECT uid FROM {user_visits} GROUP BY uid');

  while ($visit = db_fetch_object($visits)) {
    $visitors = db_query('SELECT vuid, visit FROM {user_visits} WHERE uid = %d ORDER BY visit DESC', $visit->uid);
    $visit->visitors = array();
    $visit->recent_visitors = array();
    $visit->count = 0;

    while ($visitor = db_fetch_object($visitors)) {
      // creating unique indentifier for the day
      $key = user_visits_get_history_key($visitor->visit);
      $visit->visitors[$key]++;
      if ($visit->count < $visitor_limit) {
        $visit->recent_visitors[$visitor->vuid] = $visitor->visit;
      }
      $visit->count++;
    }

    //retrieve the history array
    if ($data = db_fetch_object(db_query('SELECT history, visitors FROM {user_visits_adv} WHERE uid = %d', $visit->uid))) {
      $history = unserialize($data->history);
      // add daily visits to the history array
      foreach ($visit->visitors as $key => $count) {
        $history[$key] += $count;
      }
      ksort($history);
      // remove the oldest day from the history array
      $range = variable_get('user_visits_adv_history_limit', 7);
      if (count($history) > $range) {
        $history = array_slice($history, count($history) - $range, $range, TRUE);
      }

      // making recent visitors field
      if ($visit->count < $visitor_limit) {
        $visitors = unserialize($data->visitors);
        $visitors = array_slice($visitors, 0, ($visitor_limit - $visit->count), TRUE);
        $visit->recent_visitors += $visitors;
        arsort($visit->recent_visitors, SORT_NUMERIC);
      }
      // store all data
      db_query("UPDATE {user_visits_adv} SET total = total + %d, visitors = '%s', history = '%s' WHERE uid = %d", $visit->count, serialize($visit->recent_visitors), serialize($history), $visit->uid);
    }
    else {
      $range = variable_get('user_visits_adv_history_limit', 7);
      $history = array();
      foreach ($visit->visitors as $key => $count) {
        $history[$key] = $count;
      }
      ksort($history);
      // remove the oldest day from the history array
      if (count($history) > $range) {
        $history = array_slice($history, count($history) - $range, $range, TRUE);
      }
      db_query("INSERT INTO {user_visits_adv} (uid, total, visitors, history) VALUES (%d, %d, '%s', '%s')", $visit->uid, $visit->count, serialize($visit->recent_visitors), serialize($history));
    }
  }
  // all data is harvested, so empty the user_visits table
  db_query('DELETE FROM {user_visits}');
}

/**
 * Implementing hook_form_alter
 */
function user_visits_adv_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_visits_settings') {
    $form['user_visits']['user_visits_advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced'),
      '#weight' => 1,
    );
    $form['user_visits']['user_visits_advanced']['user_visits_adv_history_limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Limiting historical data'),
      '#default_value' => variable_get('user_visits_adv_history_limit', 7),
      '#size' => 3,
      '#maxlength' => 3,
      '#description' => t('Number of days to collect historical visit data, not more than 365 days.'),
    );
    $form['user_visits']['user_visits_advanced']['user_visits_adv_visitor_limit'] = array(
      '#type' => 'textfield',
      '#title' => t('Stored visitors limit'),
      '#default_value' => variable_get('user_visits_adv_visitor_limit', 20),
      '#size' => 3,
      '#maxlength' => 5,
      '#description' => t('Maximum number of visitors to collect per user.'),
    );
  }
}